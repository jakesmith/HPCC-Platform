name: Check win32 compiles
# env:
#   VCPKG_BINARY_SOURCES: 'clear;files,${{ github.workspace }}/../vcpkgs-cache,readwrite'  
#   VCPKG_FEATURE_FLAGS: "manifest"
#   OUR_VCPKG_TRIPLET: x64-windows
on:
  pull_request:
    branches:
      - "master"
      - "candidate-*"
      - "!candidate-7.10.*"
      - "!candidate-7.8.*"
      - "!candidate-7.6.*"
      - "!candidate-7.4.*"
      - "!candidate-7.2.*"
      - "!candidate-7.0.*"
      - "!candidate-6.*"

jobs:
  pre_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: hpcc-systems/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}
          paths_ignore: '["docs/**", "esp/src/**/*", "dockerfiles/**", "helm/**", "ecllibrary/**", "testing/**", "initfiles/**" ]'

  build:
    name: "Check compiles on Win32"
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: windows-latest
    steps:
      - name: tracing0
        run: |
          echo github.workspace = ${{ github.workspace }}
      
      - name: Check out source code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: tracing
        run: |
          echo VCPKG_BINARY_SOURCES = $ENV:VCPKG_BINARY_SOURCES
          echo vcpkgDirectory = ${{ github.workspace }}\tools\vcpkg
          echo VCPKG_FEATURE_FLAGS = $ENV:VCPKG_FEATURE_FLAGS
          echo OUR_VCPKG_TRIPLET = $ENV:OUR_VCPKG_TRIPLET
  # Restore from cache the previously built ports. If cache-miss, download and build vcpkg (aka "bootstrap vcpkg").
      - name: Restore from cache and install vcpkg
        # Download and build vcpkg, without installing any port. If content is cached already, it is a no-op.
        uses: lukka/run-vcpkg@v6
        with:
          setupOnly: true
          additionalCachedPaths: "${{ github.workspace }}/../vcpkgs-cache"
          vcpkgTriplet: x64-windows
          vcpkgDirectory: ${{ github.workspace }}/tools/vcpkg
          #vcpkgArguments: ""
      # Now that vcpkg is installed, it is being used to run with the desired arguments.
      - name: tracing2
        run: |
          echo VCPKG_ROOT = $ENV:VCPKG_ROOT
          echo Manifest root = ${{ github.workspace }}
          echo RUNVCPKG_VCPKG_ROOT = $ENV:RUNVCPKG_VCPKG_ROOT\vcpkg.cmake
          echo github.workspace = ${{ github.workspace }}

      # - name: install packages
      #   run: |
      #     $VCPKG_ROOT\vcpkg install --x-manifest-root ${{ github.workspace }}\HPCC-Platform --triplet x64-windows

      - name: Install bison
        working-directory: .
        run: |
          choco install winflexbison3 -y

      - name: Run CMake to install the dependencies specified in the vcpkg.json manifest, generate project file and build the project
        uses: lukka/run-cmake@v3
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          buildDirectory: "${{ github.workspace }}/../build"
          # This input tells run-cmake to consume the vcpkg.cmake toolchain file set by run-vcpkg.
          useVcpkgToolchainFile: true
          buildWithCMake: true
          cmakeBuildType: "RelWithDebInfo"
          cmakeGenerator: "VS16Win64"
          cmakeAppendedArgs: "-DUSE_OPENLDAP=0 -DUSE_ICU=0 -DUSE_LIBXSLT=1 -DUSE_CBLAS=0 -DUSE_ZLIB=1 -DUSE_LIBARCHIVE=0 -DUSE_BOOST_REGEX=0 -DUSE_OPENSSL=1 -DUSE_APR=0 -DUSE_AZURE=0 -DUSE_AWS=0 -DWSSQL_SERVICE=0 -DUSE_PYTHON3=0 -DUSE_PYTHON2=0 -DUSE_CASSANDRA=0 -DUSE_TBB=0 -DUSE_JAVA=0 -DUSE_NATIVE_LIBRARIES=1 -DINCLUDE_CONFIG_MANAGER=0 -DINCLUDE_TREEVIEW=0 -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE"
          buildWithCMakeArgs: "--target ALL_BUILD -- /maxcpucount:3"

      # - name: Windows compilation
      #   working-directory: .
      #   run: |
      #     mkdir build
      #     cd build
      #     cmake $Env:GITHUB_WORKSPACE -DCMAKE_TOOLCHAIN_FILE=$ENV:RUNVCPKG_VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake -DUSE_OPENLDAP=0 -DUSE_ICU=0 -DUSE_LIBXSLT=1 -DUSE_CBLAS=0 -DUSE_ZLIB=1 -DUSE_LIBARCHIVE=0 -DUSE_BOOST_REGEX=0 -DUSE_OPENSSL=1 -DUSE_APR=0 -DUSE_AZURE=0 -DUSE_AWS=0 -DWSSQL_SERVICE=0 -DUSE_PYTHON3=0 -DUSE_PYTHON2=0 -DUSE_CASSANDRA=0 -DUSE_TBB=0 -DUSE_JAVA=0 -DUSE_NATIVE_LIBRARIES=1 -DINCLUDE_CONFIG_MANAGER=0 -DINCLUDE_TREEVIEW=0 -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -G "Visual Studio 16 2019" -T host=x64 -A x64
      #     cmake --build . --config Debug --target ALL_BUILD -- /maxcpucount:3

      # - name: Fetch vcpkg cache
      #   id: cache
      #   uses: actions/cache@v2
      #   with:
      #     path: D:/a/HPCC-Platform/vcpkgs-cache
      #     key: hpccbuild-${{ env.cacheversion }}-${{ steps.setup2.outputs.base_ref }}-vcpkgs
      #     restore-keys: |
      #       hpccbuild-${{ env.cacheversion }}-vcpkgs
      # - name: cache miss
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   run: |
      #     mkdir D:/a/HPCC-Platform/vcpkgs-cache
      # - name: vcpkg
      #   run: |
      #     pwd
      #     dir
      #     cd tools\vcpkg
      #     .\bootstrap-vcpkg.bat
      # - name: Install vcpkg packages
      #   if: steps.cache.outputs.cache-hit != 'true'
      #   working-directory: .
      #   run: |
      #     pwd
      #     echo here1
      #     echo VCPKG_FEATURE_FLAGS = $ENV:VCPKG_FEATURE_FLAGS
      #     tools/vcpkg/vcpkg update --x-manifest-root D:/a/HPCC-Platform/HPCC-Platform
      #     echo here2`
      #     tools/vcpkg/vcpkg install --x-manifest-root D:/a/HPCC-Platform/HPCC-Platform --triplet x64-windows
      #     tools/vcpkg/vcpkg update --x-manifest-root D:/a/HPCC-Platform/HPCC-Platform
