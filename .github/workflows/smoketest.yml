# Smoketest github action
# =======================
#
# Uses cached instances of previous builds to perform partial (and therefore quicker) incremental builds.
# Once the platform is built and installed (make install),
# it runs the regression suite setup stage within the same github job ('build-and-setup').
#
# On success, an artifact is built, that contains the install binaries and
# the HPCC binaries that have accumulated from the setup stage.
#
# Once the 'build-and-setup' job is complete, the dependent regression suite jobs and unittest job are launched in parallel.
# The regression suite queries are manually sub-divided into chunks (alphabeticaly), and run via a job matrix for parallism.
# If anything fails, all jobs are aborted (fail-fast=true), and the logs are captured into a published artifact.
#
# NOTES:
# + pre-requisite build dependencies (and runtime dependencies) are listed manually, and must be kept up to date with the
#   requirements of the platform. MORE: a list of required build dependencies could be kept within the platform source and picked up
# + 'cacheversion' is purely in case it is necessary to force a cache-miss, i.e. all cached items are based on this version
# + Caching is via github's actions/cache, and is limited to 5GB total per repository, with oldest ejected first, and/or >7 days
#   cached builds are tagged with:
#    1) base+ref+SHA (exact match, e.g. hpccbuild-1-7.12.10-6c981c48ae6e35b62d86d8e59e42799c5cd14812)
#    2) base_ref (branch match, e.g. hpccbuild-1-7.12.10)
#    3) base-ref major-minor only (e.g. hpccbuild-1-7.12.)
#    4) base-ref major only (e.g. hpccbuild-1-7.)
#    5) generic cacheversion only (e.g. hpccbuild-1-)
#   The cache will initially try to match an exact key match (only true if rerunning PR and SHA same),
#   and will then failover to trying to find a match of 2-5, in that order.


name: smoketest
env:
  cacheversion: 1

on:
  pull_request:
    branches:
      - "master"
      - "candidate-*"
      - "!candidate-7.6.*"
      - "!candidate-7.4.*"
      - "!candidate-7.2.*"
      - "!candidate-7.0.*"
      - "!candidate-6.*"

# NB: this fails to cancel in-flight actions, with error 'Resource not accessible by integration',
# but it's non-fatal. Appears to be dependent on what permissions the PR owner has, i.e. the github token used
# does not have permission to cancel actions.
jobs:
  build-and-setup:
    name: Build platform and regress setup
    runs-on: ubuntu-20.04
    timeout-minutes: 120 # Generous, typical build time from clean is < 60
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}

    steps:
    - name: vars
      id: vars
      run: |
        if [[ "${{ github.event_name }}" = 'pull_request' ]]; then \
          echo ::set-output name=branch::${{ github.head_ref }}; \
          echo ::set-output name=sha::${{ github.event.pull_request.head.sha }}; \
          echo ::set-output name=base_ref::${{ github.base_ref }}; \
          versioned=$(echo ${{ github.base_ref }} | sed -E -n 's/^(.*)-([0-9]+)\.([0-9]+)\.([0-9]+|x)(-[0-9]+|).*$/\1 \2 \3 \4 \5/p'); \
          if [[ "${versioned}" ]]; then \
            echo matched version = ${versioned}; \
            IFS=' ' read prefix major minor point cand <<< ${versioned}; \
            echo "name=base-majorminor-restore-key::hpccbuild-${{ env.cacheversion }}-${prefix}-${major}.${minor}." ;\
            echo "name=base-majoronly-restore-key::hpccbuild-${{ env.cacheversion }}-${prefix}-${major}." ;\
            echo ::set-output name=base-majorminor-restore-key::hpccbuild-${{ env.cacheversion }}-${prefix}-${major}.${minor}. ;\
            echo ::set-output name=base-majoronly-restore-key::hpccbuild-${{ env.cacheversion }}-${prefix}-${major}. ;\
          fi; \
        else \
          echo ::set-output name=branch::${GITHUB_REF#refs/heads/}; \
          echo ::set-output name=sha::${{ github.sha }}; \
          echo ::set-output name=base_ref::${GITHUB_REF#refs/heads/}; \
        fi
        if [[ "${{ github.event.pull_request.head.repo.owner.login }}" = "${{ github.repository_owner }}" ]]; then \
          echo ::set-output name=repository::${{ github.repository }}; \
        else \
          echo ::set-output name=repository::$(echo -n ${{ github.event.pull_request.head.repo.owner.login }}/ ; echo -n ${{ github.repository }} | sed -E -n 's@^[^/]+/(.+)$@\1@p'); \
        fi

    - name: tracing
      run: |
        echo "Branch     = ${{ steps.vars.outputs.branch }}"
        echo "Base ref   = ${{ steps.vars.outputs.base_ref }}"
        echo "SHA        = ${{ steps.vars.outputs.sha}}"
        echo "Action     = ${{ github.action }}"
        echo "Event      = ${{ github.event_name }}"
        echo "Actor      = ${{ github.actor }}"
        echo "github.repository = ${{ github.repository }}"
        echo "repository = ${{ steps.vars.outputs.repository }}"
        echo "repository_owner = ${{ github.repository_owner }}"
        echo "github.workspace = ${{ github.workspace }}"
        echo "runner.workspace = ${{ runner.workspace }}"
        echo "github.event.pull_request.head.repo.owner.login = ${{ github.event.pull_request.head.repo.owner.login }}"

        if [[ "${{ github.event_name }}" = 'pull_request' ]]; then \
          echo "PR base_ref = ${{ github.base_ref }}"; \
          echo "PR head_ref = ${{ github.head_ref }}"; \
          echo "PR base SHA = ${{ github.event.pull_request.base.sha }}"; \
        fi

    - name: test1
      run: |
        rm -rf src
        mkdir src
        cd src
        git init
        git remote add origin https://github.com/jakesmith/HPCC-Platform        
        echo timing: git fetch origin --depth 1
        time git fetch origin --depth 1
    - name: test2
      run: |
        rm -rf src
        mkdir src
        cd src
        git init
        git remote add origin https://github.com/jakesmith/HPCC-Platform        
        echo timing: git fetch origin --depth 30
        time git fetch origin --depth 30
    - name: test3
      run: |        
        rm -rf src
        mkdir src
        cd src
        git init
        git remote add origin https://github.com/jakesmith/HPCC-Platform        
        echo timing: git fetch origin
        time git fetch origin
    - name: test4
      run: |        
        rm -rf src
        mkdir src
        cd src
        git init
        git remote add origin https://github.com/jakesmith/HPCC-Platform        
        git remote add upstream https://github.com/hpcc-systems/HPCC-Platform        
        echo timing: git fetch --multiple -j 2 --depth 1 origin upstream
        time git fetch --multiple -j 2 --depth 1 origin upstream
    - name: test5
      run: |        
        rm -rf src
        echo timing: clone --branch ${{ steps.vars.outputs.branch }} -n https://github.com/${{ steps.vars.outputs.repository }} src
        time git clone --branch ${{ steps.vars.outputs.branch }} -n https://github.com/${{ steps.vars.outputs.repository }} src
        
        # git clone --branch ${{ steps.vars.outputs.branch }} -n https://github.com/${{ steps.vars.outputs.repository }} src
        # if [[ "commit" == "$(git cat-file -t $(cat ../build-cache/cache-sha))" ]]; then \
        #   echo Checking out cache SHA: $(cat ../build/cache-sha); \
        # else \
        #   echo git diff failed \(SHA $(cat ../build-cache/cache-sha) missing?\). Using base_ref; \
        # fi

    # - name: Cache miss checkout
    #   uses: actions/checkout@v2
    #   with:
    #     submodules: recursive
    #     path: src

