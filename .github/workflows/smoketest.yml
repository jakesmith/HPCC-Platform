name: sm1
env:
  cacheversion: 1

on:
  pull_request:
    branches:
      - "master"
      - "candidate-*"
      - "!candidate-7.6.*"
      - "!candidate-7.4.*"
      - "!candidate-7.2.*"
      - "!candidate-7.0.*"
      - "!candidate-6.*"

# NB: this fails to cancel in-flight actions, with error 'Resource not accessible by integration',
# but it's non-fatal. Appears to be dependent on what permissions the PR owner has, i.e. the github token used
# does not have permission to cancel actions.
jobs:
  build-and-setup:
    name: Build platform and regress setup
    runs-on: ubuntu-20.04
    timeout-minutes: 120 # Generous, typical build time from clean is < 60

    steps:
    - name: vars
      id: vars
      run: |
        if [[ "${{ github.event_name }}" = 'pull_request' ]]
        then
          echo ::set-output name=branch::${{ github.head_ref }}
          echo ::set-output name=sha::${{ github.event.pull_request.head.sha }}
          echo ::set-output name=base_ref::${{ github.base_ref }}
          versioned=$(echo ${{ github.base_ref }} | sed -E -n 's/^(.*)-([0-9]+)\.([0-9]+)\.([0-9]+|x)(-[0-9]+|).*$/\1 \2 \3 \4 \5/p')
          if [[ "${versioned}" ]]
          then
            echo matched version = ${versioned}
            IFS=' ' read prefix major minor point cand <<< ${versioned}
            echo "name=base-majorminor-restore-key::hpccbuild-${{ env.cacheversion }}-${prefix}-${major}.${minor}."
            echo "name=base-majoronly-restore-key::hpccbuild-${{ env.cacheversion }}-${prefix}-${major}."
            echo ::set-output name=base-majorminor-restore-key::hpccbuild-${{ env.cacheversion }}-${prefix}-${major}.${minor}.
            echo ::set-output name=base-majoronly-restore-key::hpccbuild-${{ env.cacheversion }}-${prefix}-${major}.
          fi
        else
          echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
          echo ::set-output name=sha::${{ github.sha }}
          echo ::set-output name=base_ref::${GITHUB_REF#refs/heads/}
        fi
        if [[ "${{ github.event.pull_request.head.repo.owner.login }}" = "${{ github.repository_owner }}" ]]
        then
          echo ::set-output name=repository::${{ github.repository }}
        else
          echo ::set-output name=repository::$(echo -n ${{ github.event.pull_request.head.repo.owner.login }}/ ; echo -n ${{ github.repository }} | sed -E -n 's@^[^/]+/(.+)$@\1@p')
        fi

    - name: tracing
      run: |
        echo "Branch     = ${{ steps.vars.outputs.branch }}"
        echo "Base ref   = ${{ steps.vars.outputs.base_ref }}"
        echo "SHA        = ${{ steps.vars.outputs.sha}}"
        echo "Action     = ${{ github.action }}"
        echo "Event      = ${{ github.event_name }}"
        echo "Actor      = ${{ github.actor }}"
        echo "Ref        = ${{ github.ref }}"
        echo "Sha        = ${{ github.sha }}"
        echo "github.repository = ${{ github.repository }}"
        echo "repository = ${{ steps.vars.outputs.repository }}"
        echo "repository_owner = ${{ github.repository_owner }}"
        echo "github.workspace = ${{ github.workspace }}"
        echo "runner.workspace = ${{ runner.workspace }}"
        echo "github.event.pull_request.head.repo.owner.login = ${{ github.event.pull_request.head.repo.owner.login }}"

        if [[ "${{ github.event_name }}" = 'pull_request' ]]
        then
          echo "PR base_ref = ${{ github.base_ref }}"
          echo "PR head_ref = ${{ github.head_ref }}"
          echo "PR base SHA = ${{ github.event.pull_request.base.sha }}"
        fi
        echo restore-key1: hpccbuild-${{ env.cacheversion }}-${{ steps.vars.outputs.base_ref }}
        echo restore-key2: ${{ steps.vars.outputs.base-majorminor-restore-key }}
        echo restore-key3: ${{ steps.vars.outputs.base-majoronly-restore-key }}
        echo restore-key4: hpccbuild-${{ env.cacheversion }}-

    - name: blah
      run: |
        echo git clone -n https://github.com/${{ steps.vars.outputs.repository }} src
        git clone -n https://github.com/${{ steps.vars.outputs.repository }} src
        cd src
        echo git fetch origin +${{ github.ref }}
        git fetch origin +${{ github.ref }}
        echo git checkout ${{ github.sha }} 
        git checkout ${{ github.sha }} 
        git log -n 2
        exit 0
        if [[ "commit" == "$(git cat-file -t $(cat ../build-cache/cache-sha))" ]]
        then
          mv ../build-cache ../build
          echo Checking out cache SHA: $(cat ../build/cache-sha)
          git checkout $(cat ../build/cache-sha)
          git submodule update --init --recursive --jobs 4
          cd ../src-cache
          echo "Cached source tree files:"
          find . -type f
          echo ================
          find . -type f | cpio -p -dum ../src
          cd ../src
          find . -type f -exec touch -r ../build/cache-timestamp {} +
          git checkout ${{ steps.vars.outputs.branch }}
          git submodule update --init --recursive --jobs 4
          echo Changed files \(from SHA: $(cat ../build/cache-sha)\):
          find -name '.git*' -prune -o -newer ../build/cache-timestamp -type f -print
        else
          echo git diff failed \(SHA $(cat ../build-cache/cache-sha) missing?\). Using base_ref
          rm -rf ../build-cache ../src-cache
          mkdir ../build
          mkdir ../src-cache
          echo ::set-output name=unusable::true # force cache miss
        fi

