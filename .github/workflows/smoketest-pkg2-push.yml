# NB: --build-arg's must be set for previous ARG's for future parts of multi-stage builds

name: st-docker
env:
  cacheversion: 43

on:
  push:
    branches:
      - master
      - candidate-7.12.x

jobs:
  build-and-setup:
    name: Build platform and regress setup container
    runs-on: ubuntu-20.04

    steps:
    - name: vars
      run: |
        pwd
        echo GITHUB_ACTOR is ${GITHUB_ACTOR}
        echo base_ref is ${{ github.base_ref }}
        echo head_ref is ${{ github.head_ref }}
        echo ref is ${{ github.ref }}
        echo sha is ${{ github.sha }}
        echo github.actor is ${{ github.actor }}
        echo github.repository_owner is ${{ github.repository_owner }}
        echo event - base.sha ${{ github.event.pull_request.base.sha }}
        echo HEAD_BRANCH_CACHETAG - $HEAD_BRANCH_CACHETAG
        echo github.workspace = ${{ github.workspace }}

    - name: Fetch cache
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          build-cache
          HPCC-Platform-cache
        key: hpccbuild-${{ env.cacheversion }}-${{ github.ref }}-${{ github.sha }}
        restore-keys: |
          hpccbuild-${{ env.cacheversion }}-${{ github.ref }}
          hpccbuild-${{ env.cacheversion }}-
         
    - name: Check cache
      id: check-cache
      run: |
        pwd
        echo ::set-output name=cache-exists::$(if [ -d build-cache ]; then echo true; else echo false; fi)
        if [ -d build-cache ]; then \
          stat build-cache HPCC-Platform-cache; \
        fi
        
    - name: Prerequisites
      run: |
        pwd
        sudo apt-get update
        sudo apt-get install -yq cmake bison flex build-essential binutils-dev libldap2-dev libcppunit-dev libicu-dev libxslt1-dev zlib1g-dev libboost-regex-dev libarchive-dev libapr1-dev nodejs libaprutil1-dev libiberty-dev libhiredis-dev libtbb-dev git
        sudo apt-get install -yq libxalan-c-dev libnuma-dev nodejs libevent-dev libatlas-base-dev libblas-dev python3-dev default-libmysqlclient-dev libsqlite3-dev libmemcached-dev libcurl4-openssl-dev pkg-config libtool autotools-dev automake libssl-dev
        sudo apt-get install git-restore-mtime

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
        path: src

    # - name: Restore mtime
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   run: |
    #     git restore-mtime
    #     git submodule foreach --recursive git restore-mtime

    # - name: Cache hit prep
    #   if: steps.cache.outputs.cache-hit != 'true' && steps.check-cache.outputs.cache-exists == 'true'
    #   run: |
    #     cp -rp ../build-cache ../build
    #     cd ../HPCC-Platform-cache
    #     find . -type f | cpio -p -dum ../HPCC-Platform

    # - name: Cache miss prep
    #   if: steps.cache.outputs.cache-hit != 'true' && steps.check-cache.outputs.cache-exists != 'true'
    #   run: |
    #     echo Cache miss
    #     mkdir ../build
    #     mkdir ../HPCC-Platform-cache
        
    # - name: Build
    #   if: steps.cache.outputs.cache-hit != 'true'
    #   run: |
    #     cd ../build
    #     touch premake-timestamp
    #     make -j$(nproc) jlib
    #     cd ..
    #     cp -rp ./build ./build-cache
    #     cd HPCC-Platform
    #     find -name '.git*' -prune -o -newer ../build/premake-timestamp -type f -print | cpio -p -dum ../HPCC-Platform-cache


        # git clone -j 4 --recurse-submodules https://github.com/jakesmith/HPCC-Platform
        # cd HPCC-Platform

    - name: Build
      run: |
        cd src
        git restore-mtime
        git submodule foreach --recursive git restore-mtime
        cd ..
        if [ -d build-cache ]; then \
          echo copying existing cache; \
          cp -rp build-cache build; \
          mv build-cache build-cache-0; \
          cd HPCC-Platform-cache; \
          find . -type f | cpio -p -dum ../src; \
          cd ..; \
          mv HPCC-Platform-cache HPCC-Platform-cache-0; \
        else \
          echo Creating cache directories; \
          mkdir build; \
          rm -rf HPCC-Platform-cache; \
        fi
        cd build
        touch premake-timestamp
        cmake ../src -Wno-dev -DRUNTIME_USER=$(whoami) -DRUNTIME_GROUP=$(id -gn) -DDESTDIR=$(realpath ..)/install -DINCLUDE_PLUGINS=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PYTHON2=0 -DUSE_PYTHON3=0 -DSUPPRESS_SPARK=1 -DUSE_CPPUNIT=${USE_CPPUNIT} -DUSE_CASSANDRA=Off -DCMAKE_CXX_FLAGS="-DBUILD_TAG=\\\"dummytag\\\" -DBUILD_VERSION_MAJOR=1 -DBUILD_VERSION_MINOR=1 -DBUILD_VERSION_POINT=0" -DBUILD_TAG="smoketest"
        make -j$(nproc) jlib
        cd ..
        cp -rp build build-cache
        mkdir HPCC-Platform-cache
        cd src
        find -name '.git*' -prune -o -newer ../build/premake-timestamp -type f -print | cpio -p -dum ../HPCC-Platform-cache

    # - name: Build
    #   run: |
    #     git clone -j 4 --recurse-submodules https://github.com/${{ github.repository_owner }}/HPCC-Platform
    #     cd HPCC-Platform
    #     git restore-mtime
    #     git submodule foreach --recursive git restore-mtime
    #     mkdir -p ../build-cache
    #     mkdir -p ../HPCC-Platform-cache
    #     cp -rp ../build-cache ../build
    #     mv ../build-cache ../build-cache-1st
    #     cd ../HPCC-Platform-cache
    #     find . -type f | cpio -p -dum ../HPCC-Platform
    #     cd ..
    #     mv ./HPCC-Platform-cache ./HPCC-Platform-cache-1st
    #     cd ./build
    #     touch premake-timestamp
    #     cmake ../HPCC-Platform -Wno-dev -DRUNTIME_USER=$(whoami) -DRUNTIME_GROUP=$(id -gn) -DDESTDIR=$(realpath ..)/install  -DINCLUDE_PLUGINS=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PYTHON2=0 -DUSE_PYTHON3=0 -DSUPPRESS_SPARK=1 -DUSE_CPPUNIT=${USE_CPPUNIT} -DUSE_CASSANDRA=Off -DCMAKE_CXX_FLAGS="-DBUILD_TAG=\\\"dummytag\\\" -DBUILD_VERSION_MAJOR=1 -DBUILD_VERSION_MINOR=1 -DBUILD_VERSION_POINT=0" -DBUILD_TAG="smoketest"
    #     make -j$(nproc) jlib
    #     cd ..
    #     cp -rp ./build ./build-cache
    #     mkdir -p ./HPCC-Platform-cache
    #     cd HPCC-Platform
    #     find -name '.git*' -prune -o -newer ../build/premake-timestamp -type f -print | cpio -p -dum ../HPCC-Platform-cache
    #     cd ..
    #     mv ./build ./build-1st
    #     mv ./HPCC-Platform ./HPCC-Platform-1st
    #     # next
    #     git clone -j 4 --recurse-submodules https://github.com/${{ github.repository_owner }}/HPCC-Platform
    #     cd HPCC-Platform
    #     echo '# test' >> .github/workflows/smoketest-pkg2-push.yml
    #     git config --global user.email "you@example.com"
    #     git config --global user.name "Your Name"
    #     git commit -a -m wip
    #     git restore-mtime
    #     git submodule foreach --recursive git restore-mtime
    #     cd ../HPCC-Platform-cache
    #     find . -type f | cpio -p -dum ../HPCC-Platform
    #     cp -rp ../build-cache ../build
    #     cd ../build
    #     touch premake-timestamp
    #     cmake ../HPCC-Platform -Wno-dev -DRUNTIME_USER=$(whoami) -DRUNTIME_GROUP=$(id -gn) -DDESTDIR=$(realpath ..)/install  -DINCLUDE_PLUGINS=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PYTHON2=0 -DUSE_PYTHON3=0 -DSUPPRESS_SPARK=1 -DUSE_CPPUNIT=${USE_CPPUNIT} -DUSE_CASSANDRA=Off -DCMAKE_CXX_FLAGS="-DBUILD_TAG=\\\"dummytag\\\" -DBUILD_VERSION_MAJOR=1 -DBUILD_VERSION_MINOR=1 -DBUILD_VERSION_POINT=0" -DBUILD_TAG="smoketest"
    #     make -j$(nproc) jlib

