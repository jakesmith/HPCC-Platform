# NB: --build-arg's must be set for previous ARG's for future parts of multi-stage builds

name: st-docker
env:
  cacheversion: 23

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
#  push:
#    branches:
#      - notmain
  pull_request:
    branches:
      - master
      - candidate-7.12.x

jobs:
  build-and-setup:
    name: Build platform and regress setup container
    runs-on: ubuntu-20.04

    steps:
    - name: Prerequisites
      id: setup
      run: |
        echo pwd = $(pwd)
        sudo apt-get update
        #sudo apt-get install -yq cmake bison flex build-essential binutils-dev libldap2-dev libcppunit-dev libicu-dev libxslt1-dev zlib1g-dev libboost-regex-dev libarchive-dev libapr1-dev nodejs libaprutil1-dev libiberty-dev libhiredis-dev libtbb-dev git
        #sudo apt-get install -yq libxalan-c-dev libnuma-dev nodejs libevent-dev libatlas-base-dev libblas-dev python3-dev default-libmysqlclient-dev libsqlite3-dev libmemcached-dev libcurl4-openssl-dev pkg-config libtool autotools-dev automake libssl-dev
        sudo apt-get install git-restore-mtime
        echo ::set-output name=mmbase-tag::$(if [ "${{ github.base_ref }}" = "master" ]; then git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/${{ github.repository_owner }}/HPCC-Platform 'community_*.*.*' | tail -n 1 | sed -e 's/^.*\(community_.*\)$/\1/'; else if [[ "${{ github.base_ref }}" =~ candidate-[0-9]+\.[0-9]+\..* ]]; then findstart=$(echo "${{ github.base_ref }}" | sed -e 's/candidate-\([0-9]\+\)\.\([0-9]\+\)\..*$/\1 \2/' | awk '{ print $1*100 + $2 + 0.999 }'); git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/${{ github.repository_owner }}/HPCC-Platform 'community_*.*.*' | sed -e 's/^.*\(community_\)\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)-\(.*\)$/\1 \2 \3 \4 \5/' | awk '{ if ($2*100+$3+$4/100 <= FINDSTART) { print "community_" $2 "." $3 "." $4 "-" $5 } }' FINDSTART=$findstart | tail -n 1; fi; fi)

    # - name: Cache base-branch
    #   id: base-branch-cache
    #   uses: actions/cache@v2
    #   with:
    #     path: ./build-base
    #     key: hpccbuild-basebranch-${{ env.cacheversion }}
         
    - name: Cache major-minor-base
      id: major-minor-base-cache
      uses: actions/cache@v2
      with:
        path: |
          ./build-cache
          ./HPCC-Platform-cache
        key: hpccbuild-majorminorbase-${{ env.cacheversion }}-${{ github.repository_owner }}-${{ steps.setup.outputs.mmbase-tag }}

    - name: major-minor-cached
      if: steps.major-minor-base-cache.outputs.cache-hit == 'true'
      run: |
        cp -rp ./build-cache ./build
        find HPCC-Platform-cache -type f | cpio -p -dumv ./HPCC-Platform

    - name: major-minor-build
      id: major-minor-build
      if: steps.major-minor-base-cache.outputs.cache-hit != 'true'
      run: |
        git clone -j 4 --recurse-submodules --branch ${{ steps.setup.outputs.mmbase-tag }} https://github.com/${{ github.repository_owner }}/HPCC-Platform
        cd HPCC-Platform
        git restore-mtime
        cd ..
        mkdir build
        cd build
        touch premake-timestamp
        cmake ../HPCC-Platform -Wno-dev -DRUNTIME_USER=$(whoami) -DRUNTIME_GROUP=$(id -gn) -DDESTDIR=$(realpath ..)/install  -DINCLUDE_PLUGINS=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PYTHON2=0 -DUSE_PYTHON3=0 -DSUPPRESS_SPARK=1 -DUSE_CPPUNIT=${USE_CPPUNIT} -DUSE_CASSANDRA=Off -DCMAKE_CXX_FLAGS="-DBUILD_TAG=\\\"dummytag\\\" -DBUILD_VERSION_MAJOR=1 -DBUILD_VERSION_MINOR=1 -DBUILD_VERSION_POINT=0"
        # if grep -q '^lz4:' Makefile; then make -j$(nproc) lz4; fi
        # if grep -q '^yaml:' Makefile; then make -j$(nproc) yaml; fi
        if grep -q '^aws\-sdk\-cpp:' Makefile; then make -j$(nproc) aws-sdk-cpp; fi
        # if grep -q '^azure\-storage\-cpplite:' Makefile; then make -j$(nproc) azure-storage-cpplite; fi
        # if grep -q '^libbase58:' Makefile; then make -j$(nproc) libbase58; fi
        # if grep -q '^tbb:' Makefile; then make -j$(nproc) tbb; fi
        # if grep -q '^aeron_client:' Makefile; then make -j$(nproc) aeron_client; fi
        # if grep -q '^aeron_driver:' Makefile; then make -j$(nproc) aeron_driver; fi
        # if grep -q '^aeron_driver_static:' Makefile; then make -j$(nproc) aeron_driver_static; fi
        # if grep -q '^antlr3c:' Makefile; then make -j$(nproc) antlr3c; fi
        cd ..
        ls -lt HPCC-Platform/system/aws/aws-sdk-cpp/aws-cpp-sdk-core/include/aws/core/SDKConfig.h
        time cp -rp ./build ./build-cache
        find HPCC-Platform -newer ./build/premake-timestamp -type f | cpio -p -dum ./HPCC-Platform-cache

    - name: major-minor-build2
      id: major-minor-build2
      run: |
        ls -lt HPCC-Platform/system/aws/aws-sdk-cpp/aws-cpp-sdk-core/include/aws/core/SDKConfig.h

    # - name: base-branch-with-mmcache
    #   if: (steps.base-branch-cache.outputs.cache-hit != 'true') && (steps.major-minor-base-cache.outputs.cache-hit == 'true')
    #   run: |
    #     git clone -j 4 --recurse-submodules --branch ${{ github.base_ref }} https://github.com/${{ github.repository_owner }}/HPCC-Platform
    #     time cp -rp ./build-cache ./build

    # - name: base-branch-with-mmbuild
    #   if: (steps.base-branch-cache.outputs.cache-hit != 'true') && (steps.major-minor-base-cache.outputs.cache-hit != 'true')
    #   run: |
    #     echo newfiles = ${{ steps.major-minor-build.outputs.newfiles }}
    #     cd HPCC-Platform
    #     # git checkout ${{ github.base_ref }}
    #     # git submodule update -j 4 --init --recursive

    # - name: base-branch-rest
    #   if: steps.base-branch-cache.outputs.cache-hit != 'true'
    #   run: |
    #     cd HPCC-Platform
    #     git restore-mtime
    #     cd ../build
    #     cmake ../HPCC-Platform -Wno-dev -DRUNTIME_USER=$(whoami) -DRUNTIME_GROUP=$(id -gn) -DDESTDIR=$(realpath ..)/install -DINCLUDE_PLUGINS=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PYTHON2=0 -DUSE_PYTHON3=0 -DSUPPRESS_SPARK=1 -DUSE_CPPUNIT=${USE_CPPUNIT} -DUSE_CASSANDRA=Off -DSUPPRESS_BUILD_CONFIG_H=On -DCMAKE_CXX_FLAGS="-DBUILD_TAG=\\\"dummytag\\\" -DBUILD_VERSION_MAJOR=1 -DBUILD_VERSION_MINOR=1 -DBUILD_VERSION_POINT=0"
    #     make -j$(nproc)
    #     time cp -pr . ../build-base
    #     du -sh ../build-base

    # - name: head-branch-with-bbcache
    #   if: steps.base-branch-cache.outputs.cache-hit == 'true'
    #   run: |
    #     git clone -j 4 --recurse-submodules --branch ${{ github.head_ref }} https://github.com/${{ github.repository_owner }}/HPCC-Platform
    #     cd HPCC-Platform
    #     git submodule update -j 4 --init --recursive
    #     du -sh ../build-base
    #     time cp -pr ../build-base ../build
    #     ls -lt ../build
    #     du -sh ../build ../build-base

    # - name: head-branch-with-bbbuild
    #   if: steps.base-branch-cache.outputs.cache-hit != 'true'
    #   run: |
    #     cd HPCC-Platform
    #     git checkout ${{ github.head_ref }}
    #     git submodule update -j 4 --init --recursive

    # - name: head-branch-with-rest
    #   run: |
    #     cd HPCC-Platform
    #     git restore-mtime
    #     du -sh ../build-base ../build
    #     echo BUILD-BASE
    #     ls -lt ../build-base
    #     echo BUILD
    #     ls -lt ../build
    #     cd ../build
    #     cmake ../HPCC-Platform -Wno-dev -DRUNTIME_USER=$(whoami) -DRUNTIME_GROUP=$(id -gn) -DDESTDIR=$(realpath ..)/install -DINCLUDE_PLUGINS=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PYTHON2=0 -DUSE_PYTHON3=0 -DSUPPRESS_SPARK=1 -DUSE_CPPUNIT=${USE_CPPUNIT} -DUSE_CASSANDRA=Off -DSUPPRESS_BUILD_CONFIG_H=On -DCMAKE_CXX_FLAGS="-DBUILD_TAG=\\\"dummytag\\\" -DBUILD_VERSION_MAJOR=1 -DBUILD_VERSION_MINOR=1 -DBUILD_VERSION_POINT=0"
    #     make -j$(nproc)
    #     make -j$(nproc) install
    #     du -sh .

    # - name: Cache install and regress setup
    #   id: install-setup-cache
    #   uses: actions/cache@v2
    #   with:
    #     path: |
    #       ./install
    #       ./HPCC-Platform/testing/regress
    #     key: installsetup-${{ env.cacheversion }}-${{ github.sha }}
         
    # - name: regress setup
    #   run: |
    #     source install/opt/HPCCSystems/sbin/hpcc_setenv
    #     install/opt/HPCCSystems/etc/init.d/hpcc-init start
    #     cd HPCC-Platform/testing/regress
    #     cp ../../.github/workflows/smoketest-pkg/ecl-test.json .
    #     cat ecl-test.json
    #     ./ecl-test setup
    #     tar -I zstd ../install-setup.tgz $(realpath install) $(realpath ../HPCC-Platform/testing/regress)

    # - name: upload artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: install-setup
    #     path: install-setup.tgz
    
    
# NB: May want to upload (tgz?) as an artifact by this job,
# and download it in parallel instance of regress run.
# Since it is not wanted as shared resource between different action exections,
# and do not want it to consume part of the limited 5GB total repository cache.

  # regress1:
  #   name: regress1
  #   runs-on: ubuntu-20.04
  #   needs: [ build-and-setup ]

  #   steps:
  #   - name: Prerequisites
  #     id: setup
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -yq cmake bison flex build-essential binutils-dev libldap2-dev libcppunit-dev libicu-dev libxslt1-dev zlib1g-dev libboost-regex-dev libarchive-dev libapr1-dev nodejs libaprutil1-dev libiberty-dev libhiredis-dev libtbb-dev git
  #       sudo apt-get install -yq libxalan-c-dev libnuma-dev nodejs libevent-dev libatlas-base-dev libblas-dev python3-dev default-libmysqlclient-dev libsqlite3-dev libmemcached-dev libcurl4-openssl-dev pkg-config libtool autotools-dev automake libssl-dev
  #       echo ::set-output name=mmbase-tag::$(if [ "${{ github.base_ref }}" = "master" ]; then git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/${{ github.repository_owner }}/HPCC-Platform 'community_*.*.*' | tail -n 1 | sed -e 's/^.*\(community_.*\)$/\1/'; else if [[ "${{ github.base_ref }}" =~ candidate-[0-9]+\.[0-9]+\..* ]]; then findstart=$(echo "${{ github.base_ref }}" | sed -e 's/candidate-\([0-9]\+\)\.\([0-9]\+\)\..*$/\1 \2/' | awk '{ print $1*100 + $2 + 0.999 }'); git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/${{ github.repository_owner }}/HPCC-Platform 'community_*.*.*' | sed -e 's/^.*\(community_\)\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)-\(.*\)$/\1 \2 \3 \4 \5/' | awk '{ if ($2*100+$3+$4/100 <= FINDSTART) { print "community_" $2 "." $3 "." $4 "-" $5 } }' FINDSTART=$findstart | tail -n 1; fi; fi)

  #   - name: download artifact
  #     uses: actions/download-artifact@v2
  #     with:
  #       name: my-artifact
            
  #   # - name: Cache install and regress setup
  #   #   id: install-setup-cache
  #   #   uses: actions/cache@v2
  #   #   with:
  #   #     path: |
  #   #       ./install
  #   #       ./HPCC-Platform/testing/regress
  #   #     key: installsetup-${{ env.cacheversion }}-${{ github.sha }}
         
  #   - name: regress run
  #     run: |
  #       tar xvpfz install-setup.tgz
  #       cat install/etc/HPCC-Platform/environment.conf
  #       source install/opt/HPCCSystems/sbin/hpcc_setenv
  #       ./install/opt/HPCCSystems/etc/init.d/hpcc-init start
  #       cd HPCC-Platform/testing/regress
  #       ./ecl-test query --pq 2 --target hthor --excludeclass embedded,3rdparty,spray a*.ecl