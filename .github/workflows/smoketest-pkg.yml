# NB: --build-arg's must be set for previous ARG's for future parts of multi-stage builds

name: st-docker
on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
#  push:
#    branches:
#      - notmain
  pull_request:
    branches:
      - master

jobs:
  build-and-setup:
    name: Build platform and regress setup container
    runs-on: ubuntu-20.04

    steps:
    - name: vars
      id: vars
      shell: bash
      run:
        echo GITHUB_ACTOR is ${GITHUB_ACTOR}
        echo base_ref is ${{ github.base_ref }}
        echo head_ref is ${{ github.head_ref }}
        echo ref is ${{ github.ref }}
        echo sha is ${{ github.sha }}
        echo github.actor is ${{ github.actor }}
        echo github.repository_owner is ${{ github.repository_owner }}
        echo event - base.sha ${{ github.event.pull_request.base.sha }}
        echo HEAD_BRANCH_CACHETAG - ${{ env.HEAD_BRANCH_CACHETAG }}
        echo ::set-output name=mmbase-tag::$(echo myvalue)

        #echo ::set-output name=mmbase-tag::$(if [ "${{ github.base_ref }}" = "master" ]; then echo myvalue; fi)
        #bash -c "if [ \"${{ github.base_ref }}\" = \"master\" ]; then echo ::set-output name=mmbase-tag::myvalue; fi"
        # if [ "${{ github.base_ref }}" = "master" ]; then echo ::set-output name=mmbase-tag::$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/${{ github.repository_owner }}/HPCC-Platform 'community_*.*.*' | tail -n 1 | sed -e 's/^.*\(community_.*\)$/\1/') \
        # else \
        #   regex="candidate-[0-9]+\.[0-9]+\..*" \
        #   if [[ ${{ github.base_ref }} =~ $regex ]]; then \
        #     findstart=$(echo ${{ github.base_ref }} | sed -e 's/candidate-\([0-9]\+\)\.\([0-9]\+\)\..*$/\1 \2/' | awk '{ print $1*100 + $2 + 0.999 }') \
        #     echo ::set-output name=mmbase-tag::$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags https://github.com/${{ github.repository_owner }}/HPCC-Platform 'community_*.*.*' | sed -e 's/^.*\(community_\)\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\)-\(.*\)$/\1 \2 \3 \4 \5/' | awk '{ if ($2*100+$3+$4/100 <= FINDSTART) { print "community_" $2 "." $3 "." $4 "-" $5 } }' FINDSTART=$findstart | tail -n 1) \
        #   fi \
        # fi


    - name: outvars
      run: |
        echo mmbase-tag is ${{ steps.vars.outputs.mmbase-tag }}

    - name: Prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install -yq cmake bison flex build-essential binutils-dev libldap2-dev libcppunit-dev libicu-dev libxslt1-dev zlib1g-dev libboost-regex-dev libarchive-dev libapr1-dev nodejs
        sudo apt-get install -yq libaprutil1-dev libiberty-dev libhiredis-dev libtbb-dev libxalan-c-dev libnuma-dev nodejs libevent-dev libatlas-base-dev libblas-dev python3-dev default-libmysqlclient-dev libsqlite3-dev libmemcached-dev libcurl4-openssl-dev pkg-config libtool autotools-dev automake libssl-dev git

    - name: Cache base-branch
      id: base-branch-cache
      uses: actions/cache@v2
      with:
        path: |
          ./build
        key: hpccbuild-basebranch-${{ github.repository_owner }}-${{ github.base_ref }}

    - name: Cache major-minor-base
      if: steps.base-branch-cache.outputs.cache-hit != 'true'
      id: major-minor-base-cache
      uses: actions/cache@v2
      with:
        path: |
          ./build
        key: hpccbuild-majorminorbase-${{ github.repository_owner }}-${{ steps.vars.outputs.mmbase-tag }}

    - name: major-minor-base
      if: steps.base-branch-cache.outputs.cache-hit != 'true' && steps.major-minor-base-cache.outputs.cache-hit != 'true'
      run: |
        git clone --recurse-submodules --shallow-submodules --depth 1 --no-single-branch --branch ${{ steps.vars.outputs.mmbase-tag }} https://github.com/${{ github.repository_owner }}/HPCC-Platform.git
        mkdir build
        cd build
        cmake ../HPCC-Platform -Wno-dev -DINCLUDE_PLUGINS=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PYTHON2=0 -DUSE_PYTHON3=0 -DSUPPRESS_SPARK=1 -DUSE_CPPUNIT=${USE_CPPUNIT} -DUSE_CASSANDRA=Off -DCMAKE_CXX_FLAGS="-DBUILD_TAG=\\\"dummytag\\\" -DBUILD_VERSION_MAJOR=1 -DBUILD_VERSION_MINOR=1 -DBUILD_VERSION_POINT=0"
        if grep -q '^lz4:' Makefile; then make -j$(nproc) lz4; fi
        if grep -q '^yaml:' Makefile; then make -j$(nproc) yaml; fi
        if grep -q '^aws\-sdk\-cpp:' Makefile; then make -j$(nproc) aws-sdk-cpp; fi
        if grep -q '^azure\-storage\-cpplite:' Makefile; then make -j$(nproc) azure-storage-cpplite; fi
        if grep -q '^libbase58:' Makefile; then make -j$(nproc) libbase58; fi
        if grep -q '^tbb:' Makefile; then make -j$(nproc) tbb; fi
        if grep -q '^aeron_client:' Makefile; then make -j$(nproc) aeron_client; fi
        if grep -q '^aeron_driver:' Makefile; then make -j$(nproc) aeron_driver; fi
        if grep -q '^antlr3c:' Makefile; then make -j$(nproc) antlr3c; fi
        make -j$(nproc) jlib

    - name: base-branch
      if: steps.base-branch-cache.outputs.cache-hit != 'true'
      run: |
        cd HPCC-Platform
        git checkout --recurse-submodules ${{ github.base_ref }} 
        cd ../build 
        cmake ../HPCC-Platform -Wno-dev -DDESTDIR=/hpcc-dev/hpccinstall -DINCLUDE_PLUGINS=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PYTHON2=0 -DUSE_PYTHON3=0 -DSUPPRESS_SPARK=1 -DUSE_CPPUNIT=${USE_CPPUNIT} -DUSE_CASSANDRA=Off -DSUPPRESS_BUILD_CONFIG_H=On -DCMAKE_CXX_FLAGS="-DBUILD_TAG=\\\"dummytag\\\" -DBUILD_VERSION_MAJOR=1 -DBUILD_VERSION_MINOR=1 -DBUILD_VERSION_POINT=0"
        make -j$(nproc) jlib

    - name: head-branch
      run: |
        cd HPCC-Platform
        git checkout --recurse-submodules ${{ github.ref }}
        cd ../build
        cmake ../HPCC-Platform -Wno-dev -DDESTDIR=/hpcc-dev/hpccinstall -DINCLUDE_PLUGINS=0 -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_PYTHON2=0 -DUSE_PYTHON3=0 -DSUPPRESS_SPARK=1 -DUSE_CPPUNIT=${USE_CPPUNIT} -DUSE_CASSANDRA=Off -DSUPPRESS_BUILD_CONFIG_H=On -DCMAKE_CXX_FLAGS="-DBUILD_TAG=\\\"dummytag\\\" -DBUILD_VERSION_MAJOR=1 -DBUILD_VERSION_MINOR=1 -DBUILD_VERSION_POINT=0"
        make -j$(nproc) jlib
