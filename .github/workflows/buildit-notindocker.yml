# This is a basic workflow to help you get started with Actions

name: buildit

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
#  push:
#    branches: [ master ]
  pull_request:
    branches: [ notmain ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v2
#        with:
#          submodules: recursive

      - name: Cache pkg dependencies1
        uses: actions/cache@v2
        id: cache-depcache1
        with:
          path: "~/depcache1"
          key: depcache1_v1
      - name: Install dependencies1
        env:
          CACHE_HIT: ${{steps.cache-depcache1.outputs.cache-hit}}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            echo "Cache hit for depcache1"
            #sudo cp -v --force --recursive ~/depcache1/* /
            sudo apt-get update && sudo apt-get install -yq cmake bison flex build-essential binutils-dev libldap2-dev libcppunit-dev libicu-dev libxslt1-dev zlib1g-dev libboost-regex-dev libarchive-dev libapr1-dev
            echo "Cache hit finished copying for depcache1"
          else
            sudo apt-get update && sudo apt-get install -yq cmake bison flex build-essential binutils-dev libldap2-dev libcppunit-dev libicu-dev libxslt1-dev zlib1g-dev libboost-regex-dev libarchive-dev libapr1-dev
            mkdir -p ~/depcache1
            for dep in cmake bison flex build-essential binutils-dev libldap2-dev libcppunit-dev libicu-dev libxslt1-dev zlib1g-dev libboost-regex-dev libarchive-dev libapr1-dev; do
                echo Process dep=${dep}
                dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/depcache1/
            done
          fi

      - name: Cache pkg dependencies2
        uses: actions/cache@v2
        id: cache-depcache2
        with:
          path: "~/depcache2"
          key: depcache2_v1
      - name: Install dependencies2
        env:
          CACHE_HIT: ${{steps.cache-depcache2.outputs.cache-hit}}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            echo "Cache hit for depcache2"
            sudo cp -v --force --recursive ~/depcache2/* /
            echo "Cache hit finished copying for depcache2"
          else
            sudo apt-get update && sudo apt-get install -yq libaprutil1-dev libiberty-dev libhiredis-dev libtbb-dev libxalan-c-dev libnuma-dev nodejs libevent-dev libatlas-base-dev libblas-dev python3-dev default-libmysqlclient-dev libsqlite3-dev libmemcached-dev libcurl4-openssl-dev pkg-config libtool autotools-dev automake libssl-dev
            mkdir -p ~/depcache2
            for dep in libaprutil1-dev libiberty-dev libhiredis-dev libtbb-dev libxalan-c-dev libnuma-dev nodejs libevent-dev libatlas-base-dev libblas-dev python3-dev default-libmysqlclient-dev libsqlite3-dev libmemcached-dev libcurl4-openssl-dev pkg-config libtool autotools-dev automake libssl-dev; do
                echo Process dep=${dep}
                dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/depcache2/
            done
          fi

      - name: Cache hpcc git
        uses: actions/cache@v2
        id: cache-hpccgit_v1
        with:
          path: "~/hpccgit"
          key: hpccgit.${{ github.base_ref }} # JCSMORE - needs to be based on SHA
      - name: Install hpcc git
        env:
          CACHE_HIT: ${{steps.cache-hpccgit.outputs.cache-hit}}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            echo Cache hit - have sources
            #sudo cp -v --force --recursive ~/hpccgit ./HPCC-Platform
          else
            mkdir -p ~/hpccgit
            git clone https://github.com/jakesmith/HPCC-Platform
            cd HPCC-Platform
            git checkout master
            git submodule update --init --recursive
          fi

#      - name: Build hpcc cmake
#        uses: actions/cache@v2
#        id: cache-hpcccmake
#        with:
#          path: "~/work/cmakebuild"
#          key: hpcccmake.${{ github.base_ref }} # JCSMORE - needs to be based on SHA (only re-cmake if hpccgit has changed)
#      - name: Install hpcc cmake
#        env:
#          CACHE_HIT: ${{steps.cache-hpcccmake.outputs.cache-hit}}
#        run: |
#          if [[ "$CACHE_HIT" == 'true' ]]; then
#            echo Cache hit - keeping cmake result
#          else
#            mkdir -p ~/work/cmakebuild
#            cd ~/work/cmakebuild
#            cmake ../HPCC-Platform
#          fi

      - name: list dir
        shell: bash
        run: |
          ls -Rlt > output.log
          echo 'and home dir' >> output.log
          echo '============' >> output.log
          ls -Rlt ~/ >> output.log
      - name: Upload output file
        uses: actions/upload-artifact@v1
        with:
          name: output-log-file
          path: output.log
          
