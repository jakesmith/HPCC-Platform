#!/bin/bash
################################################################################
#    HPCC SYSTEMS software Copyright (C) 2012 HPCC SystemsÂ®.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
################################################################################

cmd=$1
ip=$2
clusternodenum=$3
clusternodes=$4
slavespernode=$5
slaveport=$6
slaveportinc=$7
master=$8
masterport=$9
logpth=${10}
instancedir=${11}
deploydir=${12}
hpcc_compname=${13}
hpcc_setenv=${14}

export logfile="${logpth}/${hpcc_compname}/${15}"

source "$hpcc_setenv"
source "$(dirname $hpcc_setenv)/../etc/init.d/hpcc_common"

slavename=thorslave_${hpcc_compname}

stop_slaves()
{
    local timer=15
    local isAlive=0

    log "Attempting to kill $slavename with SIGTERM"
    killall -SIGTERM $slavename > /dev/null 2>&1
    while [[ $isAlive -eq 0 && $timer -gt 0 ]];do
        killall -0 $slavename > /dev/null 2>&1
        isAlive=$?
        [[ $isAlive -eq 0 ]] && sleep 0.5
        ((timer--))
    done

    if [[ $isAlive -eq 0 ]]; then
        log "Failed to kill slaves with SIGTERM. Sending SIGKILL"
        killall -SIGKILL $slavename > /dev/null 2>&1
    fi

    rm -f $PID/${slavename}_*.pid > /dev/null 2>&1
}

start_slaves()
{
    # insuring dafilesrv is running on the machine as it is a prerequisite
    sudo /etc/init.d/dafilesrv status > /dev/null 2>&1
    if [[ $? -ne 0 ]];then
        sudo /etc/init.d/dafilesrv start > /dev/null 2>&1
        if [[ $? -ne 0 ]];then
            exit 1
        fi
    fi

    # insuring parent directory structure is setup properly
    mkdir -p $instancedir
    mkdir -p $(dirname $logfile)

    cd $instancedir

    log "dependency dafilesrv started"

    ulimit -Sc hard > /dev/null 2>&1
    [[ $? -ne 0 ]] && log "Failed to set ulimit for core file size"
    ulimit -Sn hard > /dev/null 2>&1
    [[ $? -ne 0 ]] && log "Failed to set ulimit for number of file descriptors open"

    log "slave init"
    log "slave(s) starting"

    # create symlink for easier identification of slaves by compName
    ln -s -f $deploydir/thorslave_lcr ${slavename}


    # This is a bit silly, have to get slave list from master + ${ip} to work out how many ${ip} matches there are in grou slave list,
    # to know how many slave process to start.
    # This is all to maintain backward compatability with clusters that list the same IP multiple times, in an unpredicatable order
    # Would also have been better to calculate this at master and pass count to frunssh, unfortunately it can could from slave to slave

    # sync to current master slaves list
    log "rsync -e ssh -o StrictHostKeyChecking=no ${master}:${instancedir}/slaves ${instancedir}/slaves.${clusternodenum}"
    rsync -e "ssh -o StrictHostKeyChecking=no" $master:$instancedir/slaves $instancedir/slaves.${clusternodenum}

    hostcount=0
    for slaveip in $(cat $instancedir/slaves.${clusternodenum}); do
        if [[ ${slaveip} = ${ip} ]]; then
            hostcount=$(( ${hostcount}+1 ))
        fi
    done
    rm -f $instancedir/slaves.${clusternodenum} > /dev/null 2>&1
    if [[ 0 = ${hostcount} ]]; then
        log "init_thorslave started for ${slaveip} but not in cluster slave group"
        exit 1
    fi
    slavespernode=$(( ${slavespernode} * ${hostcount} ))


    slavenum=${clusternodenum}
    for (( slave=1; slave<=${slavespernode}; slave++ ))
    do
        log "$slavename master=$master:$masterport slave=.:$slaveport slavenum=$slavenum logDir=$logpth/$hpcc_compname"
        ./$slavename master=$master:$masterport slave=.:$slaveport slavenum=$slavenum logDir=$logpth/$hpcc_compname 2>/dev/null 1>/dev/null &
        slavepid=$!
        if [[ "$slavepid" -eq "0" ]]; then
            log "failed to start"
        else
            log "slave pid $slavepid started"
            PID_NAME="$PID/${slavename}_${slavenum}.pid"
            echo $slavepid > $PID_NAME
        fi
        slavenum=$((${slavenum} + ${clusternodes}))
        slaveport=$((${slaveport} + ${slaveportinc}))
    done
}

print_usage()
{
    log "usage: cmd ip clusternodenum clusternodes slavesPerNode slaveport slaveportinc master masterport logdir workingdir deploydir hpcc_compname hpcc_setenv logredirect"
}

##  Main
if [[ $# -lt 10 ]]; then
    print_usage
    exit 1
fi

if [[ "start" = ${cmd} ]]; then
    start_slaves
elif [[ "stop" = ${cmd} ]]; then
    stop_slaves
else
    print_usage
    exit 1
fi

exit 0
